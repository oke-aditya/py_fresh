{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Template Repository Docs This is docs built for template repository using mkdocs.org . Using Mkdocs mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout This repository has a prebuilt CI in the .github folder. It checks for docs building. Black code formatting. Also it runs the tests written in Pytest. By defualt this public repo has all the CI tests passing. Docs folder has this documentation as made by mkdocs. Test folder contains all tests you would write with pytest. template_ml folder contains the source code which you would write. It has empty .py files just to show how you could structure your code. Dockerfile and .dockerignore files help you building your container. Some starter code is provided. Setup.py and settings.ini help in Publishing this repo to PyPi. About the template This template is open source under super permissive MIT License. Feel free to edit and re use as you like. Do give a * if you use it and share it with others.","title":"Home"},{"location":"#template-repository-docs","text":"This is docs built for template repository using mkdocs.org .","title":"Template Repository Docs"},{"location":"#using-mkdocs","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Using Mkdocs"},{"location":"#project-layout","text":"This repository has a prebuilt CI in the .github folder. It checks for docs building. Black code formatting. Also it runs the tests written in Pytest. By defualt this public repo has all the CI tests passing. Docs folder has this documentation as made by mkdocs. Test folder contains all tests you would write with pytest. template_ml folder contains the source code which you would write. It has empty .py files just to show how you could structure your code. Dockerfile and .dockerignore files help you building your container. Some starter code is provided. Setup.py and settings.ini help in Publishing this repo to PyPi.","title":"Project layout"},{"location":"#about-the-template","text":"This template is open source under super permissive MIT License. Feel free to edit and re use as you like. Do give a * if you use it and share it with others.","title":"About the template"},{"location":"contributing/","text":"Contribution Guide Please, follow these steps Step 1: Forking and Installing py_fresh \u200b1. Fork the repo to your own github account. Click the Fork button to create your own repo copy under your GitHub account. Once forked, you're responsible for keeping your repo copy up-to-date with the upstream py_fresh repo. \u200b2. Download a copy of your remote username/py_fresh repo to your local machine. This is the working directory where you will make changes: $ git clone https://github.com/oke-aditya/py_fresh.git Install the requirements. You may use miniconda or conda as well. $ pip install -r requirements.txt Step 2: Stay in Sync with the original (upstream) repo Set the upstream to sync with this repo. This will keep you in sync with py_fresh easily. $ git remote add upstream https://github.com/oke-aditya/py_fresh.git Updating your local repo: Pull the upstream (original) repo. $ git checkout master $ git pull upstream master Step 3: Creating a new branch $ git checkout -b feature-name $ git branch master * feature_name: Step 4: Make changes, and commit your file changes Edit files in your favorite editor, and format the code with black # View changes git status # See which files have changed git diff # See changes within files git add path/to/file.md git commit -m \"Your meaningful commit message for the change.\" Add more commits, if necessary. Step 5: Submitting a Pull Request A. Method 1: Using GitHub CLI Preliminary step (done only once): Install gh by following the instructions in docs . 1. Create a pull request using GitHub CLI # Fill up the PR title and the body gh pr create -B master -b \"enter body of PR here\" -t \"enter title\" 2. Confirm PR was created You can confirm that your PR has been created by running the following command, from the py_fresh folder: gh pr list You can also check the status of your PR by running: gh pr status More detailed documentation can be found https://cli.github.com/manual/gh_pr . 3. Updating a PR If you want to change your code after a PR has been created, you can do it by sending more commits to the same remote branch. For example: git commit -m \"updated the feature\" git push origin <enter-branch-name-same-as-before> It will automatically show up in the PR on the github page. If these are small changes they can be squashed together by the reviewer at the merge time and appear as a single commit in the repository. B. Method 2: Using Git 1. Create a pull request git Upload your local branch to your remote GitHub repo (github.com/username/py_fresh) git push After the push completes, a message may display a URL to automatically submit a pull request to the upstream repo. If not, go to the py_fresh main repo and GitHub will prompt you to create a pull request. 2. Confirm PR was created: Ensure your pr is listed here Updating a PR: Same as before, normally push changes to your branch and the PR will get automatically updated. git commit -m \"updated the feature\" git push origin <enter-branch-name-same-as-before> Reviewing Your PR Maintainers and other contributors will review your pull request. Please participate in the discussion and make the requested changes. When your pull request is approved, it will be merged into the upstream py_fresh repo. note py_fresh repository has CI checking. It will automatically check your code for build as well.","title":"Contributing"},{"location":"contributing/#contribution-guide","text":"Please, follow these steps","title":"Contribution Guide"},{"location":"contributing/#step-1-forking-and-installing-py_fresh","text":"\u200b1. Fork the repo to your own github account. Click the Fork button to create your own repo copy under your GitHub account. Once forked, you're responsible for keeping your repo copy up-to-date with the upstream py_fresh repo. \u200b2. Download a copy of your remote username/py_fresh repo to your local machine. This is the working directory where you will make changes: $ git clone https://github.com/oke-aditya/py_fresh.git Install the requirements. You may use miniconda or conda as well. $ pip install -r requirements.txt","title":"Step 1: Forking and Installing py_fresh"},{"location":"contributing/#step-2-stay-in-sync-with-the-original-upstream-repo","text":"Set the upstream to sync with this repo. This will keep you in sync with py_fresh easily. $ git remote add upstream https://github.com/oke-aditya/py_fresh.git Updating your local repo: Pull the upstream (original) repo. $ git checkout master $ git pull upstream master","title":"Step 2: Stay in Sync with the original (upstream) repo"},{"location":"contributing/#step-3-creating-a-new-branch","text":"$ git checkout -b feature-name $ git branch master * feature_name:","title":"Step 3: Creating a new branch"},{"location":"contributing/#step-4-make-changes-and-commit-your-file-changes","text":"Edit files in your favorite editor, and format the code with black # View changes git status # See which files have changed git diff # See changes within files git add path/to/file.md git commit -m \"Your meaningful commit message for the change.\" Add more commits, if necessary.","title":"Step 4: Make changes, and commit your file changes"},{"location":"contributing/#step-5-submitting-a-pull-request","text":"","title":"Step 5: Submitting a Pull Request"},{"location":"contributing/#a-method-1-using-github-cli","text":"Preliminary step (done only once): Install gh by following the instructions in docs .","title":"A. Method 1: Using GitHub CLI"},{"location":"contributing/#1-create-a-pull-request-using-github-cli","text":"# Fill up the PR title and the body gh pr create -B master -b \"enter body of PR here\" -t \"enter title\"","title":"1. Create a pull request using GitHub CLI"},{"location":"contributing/#2-confirm-pr-was-created","text":"You can confirm that your PR has been created by running the following command, from the py_fresh folder: gh pr list You can also check the status of your PR by running: gh pr status More detailed documentation can be found https://cli.github.com/manual/gh_pr .","title":"2. Confirm PR was created"},{"location":"contributing/#3-updating-a-pr","text":"If you want to change your code after a PR has been created, you can do it by sending more commits to the same remote branch. For example: git commit -m \"updated the feature\" git push origin <enter-branch-name-same-as-before> It will automatically show up in the PR on the github page. If these are small changes they can be squashed together by the reviewer at the merge time and appear as a single commit in the repository.","title":"3. Updating a PR"},{"location":"contributing/#b-method-2-using-git","text":"","title":"B. Method 2: Using Git"},{"location":"contributing/#1-create-a-pull-request-git","text":"Upload your local branch to your remote GitHub repo (github.com/username/py_fresh) git push After the push completes, a message may display a URL to automatically submit a pull request to the upstream repo. If not, go to the py_fresh main repo and GitHub will prompt you to create a pull request.","title":"1. Create a pull request git"},{"location":"contributing/#2-confirm-pr-was-created_1","text":"Ensure your pr is listed here Updating a PR: Same as before, normally push changes to your branch and the PR will get automatically updated. git commit -m \"updated the feature\" git push origin <enter-branch-name-same-as-before>","title":"2. Confirm PR was created:"},{"location":"contributing/#reviewing-your-pr","text":"Maintainers and other contributors will review your pull request. Please participate in the discussion and make the requested changes. When your pull request is approved, it will be merged into the upstream py_fresh repo. note py_fresh repository has CI checking. It will automatically check your code for build as well.","title":"Reviewing Your PR"},{"location":"using_template/","text":"How to use this: - Choose use this repo as template option in GitHub. This should create a repo in your GitHub account. Files to edit to set up your project. You would need to edit some files in order to rename this from py_fresh to your required repo name. Just replace pip install git+git://github.com/oke-aditya/py_fresh.git in the mk-docs-build.yml and mk-docs-deploy.yml workflows in .github folder with your package git url. This will set up docs. You may need to edit the CI, installation and deployment yml files in .github folder. They need minimal editing for new project. Please edit ALL the .md files to include description that you need. Edit the .gitingore and .dockerignore files if anything extra is needed. I have included most stuff in them. Edit the settings.ini and setup.py . You perhaps need your name and different requirements. Again most stuff is there you need very small tweaks. Edit the requirements.txt and requirements-extra.txt (optionally). Edit the LICENSE you may need a different one. Do edit the docs folder. It is built using mkdocs.org . You can refer to mkdocs to know more how to edit docs. This is just minimalistic docs which does the job. Optionally Add tests to tests folder using pytest . Also please read the README files that are present in the folders. They will help and guide you to setup stuff too. If you have any doubts or queries regarding setting up your new project. Please raise an issue to this repo.","title":"Using This Template"},{"location":"using_template/#how-to-use-this-","text":"Choose use this repo as template option in GitHub. This should create a repo in your GitHub account.","title":"How to use this: -"},{"location":"using_template/#files-to-edit-to-set-up-your-project","text":"You would need to edit some files in order to rename this from py_fresh to your required repo name. Just replace pip install git+git://github.com/oke-aditya/py_fresh.git in the mk-docs-build.yml and mk-docs-deploy.yml workflows in .github folder with your package git url. This will set up docs. You may need to edit the CI, installation and deployment yml files in .github folder. They need minimal editing for new project. Please edit ALL the .md files to include description that you need. Edit the .gitingore and .dockerignore files if anything extra is needed. I have included most stuff in them. Edit the settings.ini and setup.py . You perhaps need your name and different requirements. Again most stuff is there you need very small tweaks. Edit the requirements.txt and requirements-extra.txt (optionally). Edit the LICENSE you may need a different one. Do edit the docs folder. It is built using mkdocs.org . You can refer to mkdocs to know more how to edit docs. This is just minimalistic docs which does the job. Optionally Add tests to tests folder using pytest . Also please read the README files that are present in the folders. They will help and guide you to setup stuff too. If you have any doubts or queries regarding setting up your new project. Please raise an issue to this repo.","title":"Files to edit to set up your project."}]}